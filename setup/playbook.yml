---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml

  tasks:
    - name: Install Prerequisites
      apt: name=aptitude update_cache=yes state=latest force_apt_get=yes

# Install Packages
    - name: Update apt
      apt: update_cache=yes

    - name: Install required system packages
      apt: name={{ sys_packages }} state=latest

    - name: Install via snap
      community.general.snap:
        classic: yes
        name:
          - node

# Sudo Group Setup
    - name: Make sure we have a "wheel" group
      group:
        name: wheel
        state: present

    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'

# User + Key Setup
    - name: Create a new regular user with sudo privileges
      user:
        name: "{{ create_user }}"
        state: present
        groups: wheel
        append: true
        create_home: true
        shell: /usr/bin/zsh

    - name: Set authorized key for remote user
      authorized_key:
        user: "{{ create_user }}"
        state: present
        key: "{{ copy_local_key }}"

    - name: ensure private key and public one are present
      copy:
        src: "/root/.ssh/{{ item }}"
        dest: "/home/{{ create_user }}/.ssh/{{ item }}"
        owner: "{{ create_user }}"
        mode: 0600
      with_items:
        - id_rsa.pub
        - id_rsa

    - name: Disable password authentication for root
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin prohibit-password'


# UFW Setup
    - name: UFW - Allow SSH connections
      ufw:
        rule: allow
        name: OpenSSH

    - name: UFW - Deny all other incoming traffic by default
      ufw:
        state: enabled
        policy: deny
        direction: incoming

    - name: Cloning  oh-my-zsh
      git:
        repo: git@github.com:robbyrussell/oh-my-zsh
        dest: "/home/{{ create_user }}/.oh-my-zsh"
        accept_hostkey: yes
        key_file: "/home/{{ create_user }}/.ssh/id_rsa"

    - name: clone dotfiles
      ansible.builtin.git:
        repo: git@github.com:rzaytsev/dotfiles.git
        dest: "/home/{{ create_user }}/.dotfiles"
        accept_hostkey: yes
        key_file: "/home/{{ create_user }}/.ssh/id_rsa"

    - name: set right permissions for cloned repos
      file:
        dest: "/home/{{ create_user }}/.{{ item }}"
        owner: "{{ create_user }}"
        recurse: yes
      loop:
        - dotfiles
        - oh-my-zsh

    - name: Create a symbolic link
      ansible.builtin.file:
        src: "/home/{{ create_user }}/.dotfiles/{{ item }}-server"
        dest: "/home/{{ create_user }}/.{{ item }}"
        state: link
        owner: "{{ create_user }}"
      loop:
        - vimrc
        - zshrc
        - tmux.conf

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: "/home/{{create_user}}/.vim/{{item}}"
        state: directory
        owner: "{{create_user}}"
        mode: '0755'
      loop:
        - colors
        - autoload

    - name: Create a symbolic link
      ansible.builtin.file:
        src: "/home/{{ create_user }}/.dotfiles/{{ item }}"
        dest: "/home/{{ create_user }}/.{{ item }}"
        state: link
        owner: "{{ create_user }}"
      loop:
        - gitconfig
        - aliases
        - vim/colors/Tomorrow-Night-Eighties.vim

    - name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: "/home/{{ create_user }}/.dotfiles/vim/autoload/plug.vim"
        remote_src: yes
        dest: "/home/{{ create_user }}/.vim/autoload/plug.vim"
        owner: "{{create_user}}"

    - name: Execute the command in remote shell; stdout goes to the specified file on the remote
      shell: "vim -c 'PlugUpgrade' -c 'PlugInstall' -c ':qall!'"
